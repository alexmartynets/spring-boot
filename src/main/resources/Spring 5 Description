Spring Boot. Spring Security.

Задача 8
1) Перенести приложение на Spring Boot, вместо JSP-страниц HTML + Thymeleaf.
2) Юзер д.б. с ролями
3) YMl

Вопросы для самопроверки:
1) Как подключить секьюрити к проекту?
2) Как мы можем добавить секьюрность к контроллеру? (2 способа минимум)
3) Что будет являться эквивалентом пользователя и роли в Спринг Секьюрити приложении?
4) Какие варианты хранения информации о пользователях вы знаете?

Этот модуль спринга позволяет нам внедрять права доступа,
а также контролировать их исполнение без ручных проверок.

Спринг Секьюрити базируется на 2х интерфейсах, которые определяют связь сущностей с секьюрностью:
UserDetails и
GrantedAuthority.

UserDetails - то, что будет интерпретироваться системой как пользователь.
GrantedAuthority - сущность, описывающая права юзера.

Скачайте ПРИЛОЖЕНИЕ и просмотрите его.

Оба эти интерфейса имеют множество реализаций:
просмотрите класс SecurityConfig,
в методе configure с помощью настроек  inMemoryAuthentication()
мы собираем единственный на всю программу экземпляр UserDetails с именем и паролем админ-админ,
а его роль “ADMIN” так же будет  преобразована в экземпляр GrantedAuthority.

Это простейший способ создания секьюрности.
Так же мы можем использовать jdbc аутентификацию путем написания запроса,
возвращающего пользователя и роль.

Как вы понимаете, такие способы максимально просты, но лишены достаточной гибкости,
потому наиболее часто используемый вариант настройки выглядит
как имплементация  UserDetails и GrantedAuthority от классов-сущностей с переопределением существующих методов.

Рассмотрим приложение:

Новые классы:

SpringSecurityInitializer - обязателен для не boot приложения.
Кода в нем нет, но требуется для регистрации  секьюрити в спринг-контейнере.

SecurityConfig - настройка секьюрности определенных URL и настройка UserDetails и GrantedAuthority.

LoginSuccessHandler - хэндлер, содержащий в себе алгоритм действий при  успешной аутентификации.
Например, тут мы можем отправить админа на админку после логина, а юзера на главную страницу сайта и тп.

В зависимостях содержатся новые библиотеки:
ядро спринга
веб секьюрити для привязки к mvc и
taglibs для удобной работы с данными аутентификации в jsp файлах.


Задание:

1) Перенесите классы и зависимости из примера в свое MVC  приложение из предыдущей задачи.
2) Создайте класс Role и свяжите Юзера с ролями так, чтобы юзер мог иметь несколько ролей.
3) Имплементируйте модели интерфейсами UserDetails и GrantedAuthority.
И измените настройку секьюрности с inMemory на userDetailService.
4) Все CRUD операции и страницы для них должны быть доступны только для админа
5) Юзер должен иметь доступ только к своей домашней странице, где выводятся все его данные
6) Настройте логаут с любой страницы с использованием jsp блока, который будет подгружен ко всем страницам
7) Настройте LoginSuccessHandler так, чтобы админа направляло на страницы CRUD, а юзера на его страницу.

ToDo:
- ввести в формы ввода возможность выбора нескольких ролей  => Done

1) Наполнить таблицу роли ADMIN / USER  => Done
- роли подтягиваются через БД как существующую роль  => Done
- новые роли в roles не должны создаваться  => Done
т.е. тип связи д.б.:  => Done
@ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.REFRESH)

- выделить отдельное DAO для Role  => Done
- сделать методы для Role  => Done
- разобраться как подтягивается role.id из jsp  => через jquery / JS
